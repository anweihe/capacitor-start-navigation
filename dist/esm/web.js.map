{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AAI5D,MAAM,OAAO,wBAAyB,SAAQ,SAAS;IACrD;QACE,KAAK,CAAC;YACJ,IAAI,EAAE,uBAAuB;YAC7B,SAAS,EAAE,CAAC,KAAK,CAAC;SACnB,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,OAA+B;QACjD,MAAM,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,SAAS,CAAC;QACnD,IAAI,YAAY,GAAG,IAAI,CAAC;QACxB,IAAI,OAAO,CAAC,OAAO,EAAE;YACnB,IAAI,OAAO,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,EAAE;gBAClC,YAAY,aAAZ,YAAY,cAAZ,YAAY,IAAZ,YAAY,GAAK,EAAE,EAAC;gBACpB,YAAY,IAAI,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,GAAG,CAAC;aAC9C;YAED,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,EAAE;gBAChC,YAAY,aAAZ,YAAY,cAAZ,YAAY,IAAZ,YAAY,GAAK,EAAE,EAAC;gBACpB,YAAY,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,GAAG,GAAG,CAAC;aAC5C;YAED,IAAI,OAAO,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,EAAE;gBACjC,YAAY,aAAZ,YAAY,cAAZ,YAAY,IAAZ,YAAY,GAAK,EAAE,EAAC;gBACpB,YAAY,IAAI,OAAO,CAAC,OAAO,CAAC,KAAK,GAAG,GAAG,CAAC;aAC7C;YAED,IAAI,OAAO,CAAC,OAAO,CAAC,UAAU,IAAI,IAAI,EAAE;gBACtC,YAAY,aAAZ,YAAY,cAAZ,YAAY,IAAZ,YAAY,GAAK,EAAE,EAAC;gBACpB,YAAY,IAAI,OAAO,CAAC,OAAO,CAAC,UAAU,GAAG,GAAG,CAAC;aAClD;YAED,IAAI,OAAO,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,EAAE;gBACnC,YAAY,aAAZ,YAAY,cAAZ,YAAY,IAAZ,YAAY,GAAK,EAAE,EAAC;gBACpB,YAAY,IAAI,OAAO,CAAC,OAAO,CAAC,OAAO,GAAG,GAAG,CAAC;aAC/C;YAED,oBAAoB;YACpB,YAAY,GAAG,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SAC3C;aAAM;YACL,YAAY,GAAG,GAAG,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,SAAS,EAAE,CAAC;SAC3D;QAED,MAAM,CAAC,IAAI,CACT,sDAAsD,YAAY,eAAe,UAAU,EAAE,EAC7F,QAAQ,CACT,CAAC;IACJ,CAAC;CACF;AAED,MAAM,eAAe,GAAG,cAAc,CAA2B,uBAAuB,EAAE;IACxF,GAAG,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,wBAAwB,EAAE,CAAC;CACzE,CAAC,CAAC;AAEH,cAAc,eAAe,CAAC;AAC9B,OAAO,EAAE,eAAe,EAAE,CAAC","sourcesContent":["import { WebPlugin, registerPlugin } from \"@capacitor/core\";\n\nimport type { StartNavigationOptions, StartNavigationPlugin } from \"./definitions\";\n\nexport class StartNavigationPluginWeb extends WebPlugin implements StartNavigationPlugin {\n  constructor() {\n    super({\n      name: \"StartNavigationPlugin\",\n      platforms: [\"web\"],\n    });\n  }\n\n  async launchMapsApp(options: StartNavigationOptions): Promise<void> {\n    const travelMode = options.travelMode || 'driving';\n    let addressQuery = null;\n    if (options.address) {\n      if (options.address.street != null) {\n        addressQuery ??= \"\";\n        addressQuery += options.address.street + \",\";\n      }\n\n      if (options.address.city != null) {\n        addressQuery ??= \"\";\n        addressQuery += options.address.city + \",\";\n      }\n\n      if (options.address.state != null) {\n        addressQuery ??= \"\";\n        addressQuery += options.address.state + \",\";\n      }\n\n      if (options.address.postalCode != null) {\n        addressQuery ??= \"\";\n        addressQuery += options.address.postalCode + \",\";\n      }\n\n      if (options.address.country != null) {\n        addressQuery ??= \"\";\n        addressQuery += options.address.country + \",\";\n      }\n\n      // Remove last comma\n      addressQuery = addressQuery?.slice(0, -1);\n    } else {\n      addressQuery = `${options.latitude},${options.longitude}`;\n    }\n\n    window.open(\n      `https://www.google.com/maps/dir/?api=1&destination=${addressQuery}&travelmode=${travelMode}`,\n      \"_blank\"\n    );\n  }\n}\n\nconst StartNavigation = registerPlugin<StartNavigationPluginWeb>(\"StartNavigationPlugin\", {\n  web: () => import(\"./web\").then((m) => new m.StartNavigationPluginWeb()),\n});\n\nexport * from \"./definitions\";\nexport { StartNavigation };\n"]}